#include<iostream>
#include<cstring>

using namespace std;

const int N = 110;

int n;

int head[N],to[N * N],last[N * N],cnt;
void add(int a,int b){
	to[++cnt] = b;
	last[cnt] = head[a];
	head[a] = cnt;
}

int dfn[N],low[N],scc_cnt,sta[N],flag[N];
int top,times,belong[N],Size[N],toopc[N],toopr[N];
void dfs(int x){
	dfn[x] = low[x] = ++times;
	sta[++top] = x;flag[x] = 1;
	for(int i = head[x]; i != -1; i = last[i]){
		int j = to[i];
		if(!dfn[j]){
			dfs(j);
			low[x] = min(low[x],low[j]);
		}else if(flag[j]){
			low[x] = min(low[x],dfn[j]);
		}
	}
	
	int h = 0;
	if(low[x] == dfn[x]){
		scc_cnt++;
		int u;
		do{
			h++;
			u = sta[top--];
			belong[u] = scc_cnt;
			flag[u] = 0;
		}while(u != x);
		Size[scc_cnt] = h;
	}
}

int main(){
	memset(head,-1,sizeof head);
	cin >> n;
	for(int i = 1; i <= n; i++){
		int x;
		while(cin >> x){
			if(x == 0) break;
			add(i,x);
		}
	}
	
	for(int i = 1; i <= n; i++){
		if(!dfn[i]){
			dfs(i);
		}
	}
	
	for(int i = 1; i <= n; i++){
		for(int j = head[i]; j != -1; j = last[j]){
			int k = to[j];
			if(belong[i] != belong[k]){
				toopr[belong[k]]++;
				toopc[belong[i]]++;
			}
		}
	}
	
	int sum = 0,sum1 = 0;
	for(int i = 1; i <= scc_cnt; i++){
		if(toopr[i] == 0){
			sum++;
		}
		if(toopc[i] == 0){
			sum1++;
		}
	}
	
	
	if(sum == 0) sum = 1;
	cout << sum << endl;
	
	if(scc_cnt == 1) {
		cout << 0 << endl;
		return 0;
	}
	
	cout << max(sum,sum1) << endl;//出度入度的最大值；
	
	
	
	
	return 0;
}
