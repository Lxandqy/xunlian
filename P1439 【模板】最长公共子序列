/*举个例子 1 2 3 4 5 6
          3 2 1 4 5 6
          因为两个公共子序列是从前往后对应的 比如 上面 的3 4 5 6 和 下面的3 4 5 6 顺序是对应的 都是 3 4 5 6
          所以将上面的3 4 5 6分别对应 一个数 比如 6 7 8 9 那么下面的3 4 5 6分别对应的也是3 4 5 6 是和上面一样是递增的
          所以问题就可以转换为 映射中的最长上升子序列
          */



#include<iostream>
#include<map>

using namespace std;
const int N = 100010;
int a[N],dp[N],b[N];
map<int,int>m;

int main(){
	int n;
	cin >> n;
	for(int i = 1; i <= n; i++){
		cin >> a[i];
		m[a[i]] = i;
	}
	for(int i = 1; i <= n; i++){
		cin >> b[i];
	}
	
	int len = 0;
	for(int i = 1; i <= n; i++){
		int l = 0,r = len;
		while(l < r){
			int mid = (l + r + 1) >> 1;
			if(dp[mid] >= m[b[i]]){
				r = mid - 1;
			}else l = mid;
		}
		dp[r + 1] = m[b[i]];
		len = max(len,r + 1);
	}
	
	cout << len << endl;
	
	
	return 0;
}
