//利用二分求法

#include<iostream>
#include<cstring>
#include<deque>
#include<cstdio>

using namespace std;
const int N = 1010,M = 20010;
int head[N],to[M],w[M],last[M],cnt;
int n,p,k;
void add(int a,int b,int c){
	to[++cnt] = b;
	w[cnt] = c;
	last[cnt] = head[a];
	head[a] = cnt;
}

int flag[N],dist[N];
bool check(int bound){
	memset(flag,0,sizeof flag);
	memset(dist,0x3f,sizeof dist);
	deque<int>q;
	
	dist[1] = 0;
	q.push_back(1);
	
	while(q.size()){
		int p = q.front();
		q.pop_front();
		
		if(flag[p]) continue;
		flag[p] = 1;
		
		for(int i = head[p]; i != -1; i = last[i]){
			int ww = w[i] > bound;
			if(dist[to[i]] > dist[p] + ww){
				dist[to[i]] = dist[p] + ww;
				if(!ww) q.push_front(to[i]);
				else q.push_back(to[i]);
			}
		}
	}
	return dist[n] <= k;
}

int main(){
	scanf("%d%d%d",&n,&p,&k);
	int x,y,z;
	memset(head,-1,sizeof head);
	for(int i = 1; i <= p; i++){
		scanf("%d%d%d",&x,&y,&z);
		add(x,y,z);
		add(y,x,z);
	}
	
	int l = 0,r = 1e6 + 1;
	while(l < r){
		int mid = l + r >> 1;
		if(check(mid)) r = mid;
		else l = mid + 1;
	}
	
	if(r == 1e6 + 1) r = -1;
	cout << r << endl;	
	
	return 0;
}

//利用最短路思想
#include <bits/stdc++.h>
using namespace std;
const int N=10000*3+100;
const int M=1100;
int tot,n,m,k,ver[N],Next[N],head[N],edge[N],dis[M][M];
bool vis[M];
queue<int> q;
void spfa(int s)
{
    memset(dis,0x3f,sizeof(dis));
    memset(vis,false,sizeof(vis));
    dis[s][0]=0;
    vis[s]=1;
    q.push(s);
    while(!q.empty())
    {
        int x=q.front();
        q.pop();
        vis[x]=0;
        for (int i=head[x]; i ; i=Next[i])
        {
            int j=edge[i],z=ver[i],w=max(dis[x][0],z);
            if (dis[j][0]>w)
            {
                dis[j][0]=w;
                if(!vis[j])
                    q.push(j),vis[j]=1;
            }
            for(int p=1; p<=k; p++)
            {
                int w=min(dis[x][p-1],max(dis[x][p],z));
                if (dis[j][p]>w)
                {
                    dis[j][p]=w;
                    if(!vis[j])
                        q.push(j),vis[j]=1;
                }
            }
        }
    }
}
void add(int a,int b,int c)
{
    edge[++tot]=b;
    ver[tot]=c;
    Next[tot]=head[a];
    head[a]=tot;
}
int main()
{
    scanf("%d%d%d",&n,&m,&k);
    for(int i=1; i<=m; i++)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);
        add(b,a,c);
    }
    spfa(1);
    int ans=1e9;
    for(int i=0; i<=k; i++)
        ans=min(ans,dis[n][i]);
    if (ans==1e9)
        printf("-1");
    else
        printf("%d",ans);
    return 0;
}

